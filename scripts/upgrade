#!/bin/bash

source _common.sh
source /usr/share/yunohost/helpers

#=================================================

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_systemctl --service=$app-backend --action="stop"
ynh_systemctl --service=$app-exporter --action="stop"

ynh_app_setting_set_default  --app=$app --key=telemetry_enabled --value=false

#=================================================
# "REBUILD" THE APP (DEPLOY NEW SOURCES, RERUN NPM BUILD...)
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Installing dependencies..."

# Install Nodejs
#REMOVEME? ynh_nodejs_install

ynh_setup_source --dest_dir="$install_dir/jdk" --source_id="jdk"
export JAVA_HOME=$install_dir/jdk

ynh_setup_source --dest_dir="$install_dir/emsdk" --source_id="emsdk"

ynh_setup_source --dest_dir="$install_dir/babashka" --source_id="babashka"

chown -R $app:www-data "$install_dir"

tmp_dir=$(mktemp -d)

pushd $tmp_dir
    curl -L -O https://github.com/clojure/brew-install/releases/latest/download/linux-install.sh
    chmod +x linux-install.sh
    ynh_hide_warnings ./linux-install.sh -p $install_dir/clojure
popd

ynh_safe_rm $tmp_dir

ynh_hide_warnings ynh_exec_as_app RUSTUP_HOME="$install_dir"/.rustup CARGO_HOME="$install_dir"/.cargo bash -c 'curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -q -y'

export TS=$(date +%s)
export BUILD_DATE=$(date -R)

pushd $install_dir/emsdk
  ynh_hide_warnings ynh_exec_as_app PATH=$PATH JAVA_HOME=$JAVA_HOME NODE_ENV=production ./emsdk install latest
  ynh_hide_warnings ynh_exec_as_app PATH=$PATH JAVA_HOME=$JAVA_HOME NODE_ENV=production ./emsdk activate latest
popd

. $install_dir/emsdk/emsdk_env.sh
export PATH=$install_dir/.cargo/bin:$JAVA_HOME/bin:$install_dir/clojure/bin:$install_dir/babashka:$nodejs_dir:$PATH

ynh_hide_warnings ynh_exec_as_app PATH=$PATH JAVA_HOME=$JAVA_HOME NODE_ENV=production rustup target add wasm32-unknown-emscripten

ynh_script_progression "Upgrading source files..."

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir/build"
ynh_script_progression "Building frontend..."

chown -R $app:www-data "$install_dir"
chmod -R o-rwx "$install_dir"

pushd $install_dir/build/frontend
    corepack enable
    ynh_hide_warnings npm install -g corepack@latest
    ynh_hide_warnings corepack prepare --activate
    ynh_hide_warnings ynh_exec_as_app NODE_ENV=production yarn install --immutable

    ynh_hide_warnings ynh_exec_as_app JDK_JAVA_OPTIONS=-Xmx2G PATH=$PATH JAVA_HOME=$JAVA_HOME NODE_ENV=production yarn run build:app:main --config-merge "{:release-version \"${current_hash}-${TS}\"}"
    ynh_hide_warnings ynh_exec_as_app PATH=$PATH JAVA_HOME=$JAVA_HOME NODE_ENV=production yarn run build:wasm
    ynh_hide_warnings ynh_exec_as_app PATH=$PATH JAVA_HOME=$JAVA_HOME NODE_ENV=production yarn run build:app:libs
    ynh_hide_warnings ynh_exec_as_app PATH=$PATH JAVA_HOME=$JAVA_HOME NODE_ENV=production yarn run build:app:assets

    ynh_replace --match="%version%" --replace="$version" --file="$install_dir/build/frontend/resources/public/index.html"
    ynh_replace --match="%version%" --replace="$version" --file="$install_dir/build/frontend/resources/public/render.html"
    ynh_replace --match="%version%" --replace="$version" --file="$install_dir/build/frontend/resources/public/rasterizer.html"

    ynh_replace --match="%buildDate%" --replace="$build_date" --file="$install_dir/build/frontend/resources/public/index.html"
    ynh_replace --match="%buildDate%" --replace="$build_date" --file="$install_dir/build/frontend/resources/public/rasterizer.html"

    ynh_replace --match="version=develop" --replace="version=$version" --file="$install_dir/build/frontend/resources/public/js/render_wasm.js"
popd

ynh_safe_rm $install_dir/frontend
mkdir -p $install_dir/frontend
mv $install_dir/build/frontend/resources/public/* $install_dir/frontend
#mv $install_dir/build/frontend/storybook-static $install_dir/frontend
chown -R $app:www-data $install_dir/frontend
chmod -R 755 $install_dir/frontend

ynh_script_progression "Building backend..."

pushd $install_dir/build/backend
    mkdir -p target/classes;
    mkdir -p target/dist;
    echo "$version" > target/classes/version.txt;
    cp ../CHANGES.md target/classes/changelog.md;
    chown -R $app:$app target

    ynh_hide_warnings ynh_exec_as_app PATH=$PATH JAVA_HOME=$JAVA_HOME clojure -T:build jar;
    mv target/penpot.jar target/dist/penpot.jar
    cp resources/log4j2.xml target/dist/log4j2.xml
    cp scripts/run.template.sh target/dist/run.sh
    chmod +x target/dist/run.sh;

    # Prefetch templates
    mkdir builtin-templates;
    bb ./scripts/prefetch-templates.clj resources/app/onboarding.edn builtin-templates/
    cp -r builtin-templates target/dist/
popd

ynh_safe_rm $install_dir/backend
mkdir -p $install_dir/backend
mv $install_dir/build/backend/target/dist/* $install_dir/backend
chown -R $app:$app $install_dir/backend
chmod -R 700 $install_dir/backend

ynh_script_progression "Building exporter..."

pushd $install_dir/build/exporter
    ynh_hide_warnings corepack prepare --activate
    ynh_hide_warnings ynh_exec_as_app NODE_ENV=production yarn install --immutable
    ynh_safe_rm "target"
    ynh_hide_warnings ynh_exec_as_app PATH=$PATH JAVA_HOME=$JAVA_HOME NODE_ENV=production clojure -M:dev:shadow-cljs release main
    cp yarn.lock target/
    cp package.json target/

    ynh_replace --match="%version%" --replace="$version" --file="$install_dir/build/exporter/target/app.js"
popd

ynh_safe_rm $install_dir/exporter
mkdir -p $install_dir/exporter
mv $install_dir/build/exporter/target/* $install_dir/exporter
cp $install_dir/build/.yarnrc.yml $install_dir/exporter
chown -R $app:$app $install_dir/exporter
chmod -R 700 $install_dir/exporter

ynh_safe_rm $install_dir/.cache

pushd $install_dir/exporter
    ynh_hide_warnings corepack prepare --activate
    ynh_hide_warnings ynh_exec_as_app NODE_ENV=production yarn install --immutable
    ynh_hide_warnings ynh_exec_as_app NODE_ENV=production yarn run playwright install chromium
popd

ynh_script_progression "Cleaning up..."

ynh_safe_rm $install_dir/.npm
ynh_safe_rm $install_dir/.yarn
ynh_safe_rm $install_dir/build
ynh_safe_rm $install_dir/.m2
ynh_safe_rm $install_dir/.clojure
ynh_safe_rm $install_dir/clojure
ynh_safe_rm $install_dir/babashka
ynh_safe_rm $install_dir/.cache/ms-playwright/firefox-*
ynh_safe_rm $install_dir/.cache/ms-playwright/webkit-*
ynh_safe_rm $install_dir/.cache/yarn
ynh_safe_rm $install_dir/.cache/node
ynh_safe_rm $install_dir/.cargo
ynh_safe_rm $install_dir/.rustup
ynh_safe_rm $install_dir/emsdk

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression "Upgrading system configurations related to $app..."

ynh_config_add_nginx

ynh_config_add_systemd --template="backend.service" --service="$app-backend"
yunohost service add $app-backend --log="/var/log/$app/$app-backend.log"

ynh_config_add_systemd --template="exporter.service" --service="$app-exporter"
yunohost service add $app-exporter --log="/var/log/$app/$app-exporter.log"

ynh_config_add_logrotate "/var/log/$app/$app-backend.log"
ynh_config_add_logrotate "/var/log/$app/$app-exporter.log"

#=================================================
# RECONFIGURE THE APP (UPDATE CONF, APPLY MIGRATIONS...)
#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression "Updating database configuration..."

ynh_psql_db_shell <<< "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

ynh_script_progression "Updating configuration..."

ynh_config_add --template="config.js" --destination="$install_dir/frontend/js/config.js"
chmod 755 "$install_dir/frontend/js/config.js"
chown $app:www-data "$install_dir/frontend/js/config.js"

ynh_config_add --template="environ" --destination="$install_dir/backend/environ"

ynh_config_add --template="exporter.env" --destination="$install_dir/exporter/.env"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

ynh_systemctl --service=$app-backend --action="start" --log_path="/var/log/$app/$app-backend.log" --wait_until="welcome to penpot" --timeout=300

ynh_systemctl --service=$app-exporter --action="start" --log_path="/var/log/$app/$app-exporter.log" --wait_until="redis connection established"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
